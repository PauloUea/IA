# -*- coding: utf-8 -*-
"""SRJ - RBC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17Tg9p7Q8PvpPPjvaiGDL5cnzLbmXbnyG

#O problema de indecisão na hora da escolha dos jogos

Todos nós já experimentamos algum tipo de jogo eletrônico, e logo notamos que a gama de possibilidades é ampla e em constante expansão. A indústria de *games* sempre avança incansavelmente em busca de novos gêneros e formas de alcançar todos os gostos propostos pela sociedade de *gamers* em todo o planeta. Essa diversidade, no entanto, promove um dilema comum entre recém chegados e experts no assunto: a indecisão. Ela pode fazer com que o jogador acabe escolhendo jogos que não vão lhe proporcionar a melhor experiência ou ainda deixar de conhecer alguns títulos de lhe renderiam horas de diversão legítima.

##Sistema de Recomendação de Jogos Retrô Baseado em Casos (SRJ)

O SRJ têm por objetivo auxiliar o cidadão *gamer* a ponderar melhor suas escolhas em relação a jogos eletrônicos retrô. O sistema irá recomendar alguns jogos de produtoras mais antigas, e irá assistir o usuário segundo os seus gostos. No final da experiÊncia com o sistema, serão gerados algumas recomendações de *games* de acordo com o estilo de jogo do usuário atual e casos passados de outros jogadores.
"""

!pip install streamlit

# Commented out IPython magic to ensure Python compatibility.
# %%writefile SR.py

!ngrok authtoken 2ZicqSGqF3mDncp92dKZMHihQG1_7E2e13TPyV8fYbyU8e8g9

!pip install pyngrok

from pyngrok import ngrok

public_url = ngrok.connect(port=8501)
public_url

import streamlit as st
import numpy as np

class Caso:
    def __init__(self, descricao, atributos, pesos, recomendacao):
        self.descricao = descricao
        self.atributos = np.array(atributos)
        self.pesos = np.array(pesos)
        self.recomendacao = recomendacao

def similaridade_local(caso1, caso2):
    return np.sum(caso1.atributos[:-2] != caso2.atributos[:-2])

def similaridade_global(caso1, caso2):
    similaridades_locais = np.array([similaridade_local(caso1, caso2)])
    similaridade_ponderada = np.sum(similaridades_locais * caso1.pesos) / np.sum(caso1.pesos)
    return similaridade_ponderada

class SistemaRecomendacaoSRJ:
    def __init__(self):
        self.base_de_dados = []

    def adicionar_caso(self, caso):
        self.base_de_dados.append(caso)

    def recuperar_caso(self, novo_caso, medida_similaridade):
        similaridades = [medida_similaridade(novo_caso, caso) for caso in self.base_de_dados]
        indice_mais_similar = np.argmin(similaridades)
        return self.base_de_dados[indice_mais_similar]

categorias = {
    'Ação': {'Não Gosto': 0, 'Gosto': 1},
    'Corrida': {'Não Gosto': 0, 'Gosto': 1},
    'RPG': {'Não Gosto': 0, 'Gosto': 1},
    'Luta': {'Não Gosto': 0, 'Gosto': 1},
    'Aventura': {'Não Gosto': 0, 'Gosto': 1},
    'Simulação': {'Não Gosto': 0, 'Gosto': 1},
    'Multiplayer':{'Não Gosto': 0, 'Gosto': 1},
    'Recomendação': {'Contra': 0, 'The Legend Of Zelda': 1, 'Chrono Trigger': 2, 'Command&Conquer': 3, 'SimCity': 4, 'Street Fighter': 5, 'Super Mario Kart': 6, 'SuperMetroid': 7, 'Super Mario World': 8}
}

pesos_atributos = np.array([5, 1, 1, 1, 2, 1, 3, 1]).reshape(1, -1)

caso1 = Caso("Caso 1", [0, 0, 1, 0, 1, 0, 0, 0], pesos_atributos, 'Chrono Trigger')
caso2 = Caso("Caso 2", [1, 1, 0, 0, 0, 0, 1, 0], pesos_atributos, 'Super Mario Kart')
caso3 = Caso("Caso 3", [1, 0, 0, 1, 0, 0, 1, 0], pesos_atributos, 'Street Fighter')

sistema = SistemaRecomendacaoSRJ()
sistema.adicionar_caso(caso1)
sistema.adicionar_caso(caso2)
sistema.adicionar_caso(caso3)

st.title()

st.header("Informe suas preferencias:")
acao = st.radio("Ação", ['Não Gosto', 'Gosto'])
corrida = st.radio("Corrida", ['Não Gosto', 'Gosto'])
rpg = st.radio("RPG", ['Não Gosto', 'Gosto'])
luta = st.radio("Luta", ['Não Gosto', 'Gosto'])
aventura = st.radio("Aventura", ['Não Gosto', 'Gosto'])
simulacao = st.radio("Simulação", ['Não Gosto', 'Gosto'])
multiplayer = st.radio("Multiplayer", ['Não Gosto', 'Gosto'])

novo_caso = Caso("Novo Caso",
                 [categorias['Ação'][acao],
                  categorias['Corrida'][corrida],
                  categorias['RPG'][rpg],
                  categorias['Luta'][luta],
                  categorias['Aventura'][aventura],
                  categorias['Simulação'][simulacao],
                  categorias['Multiplayer'][multiplayer],
                  0, 0],
                 pesos_atributos,
                 None)

caso_recuperado_global = sistema.recuperar_caso(novo_caso, similaridade_global)

st.header("Resultado:")
st.write(f"Diagnóstico do Caso Recuperado: {caso_recuperado_global.recomendacao}")

!streamlit run SR.py --server.port 8501 &>/dev/null&

!pgrep streamlit

!kill 60306

ngrok.kill()